Exact real arithmetic in Haskell

Exact real arithmetic allows us to do computations without worrying
about precision or rounding. In contrast with arbitrary precision
arithmetic, we only need to specify an output precision and the
details for intermediate steps are handled automatically.

In this talk we will implement exact real arithmetic in two very
different ways. First, the "fast binary Cauchy" system amounts to
representing each real as a function Natural -> Rational, such that
each successive output is a closer approximation to the true value
than the last. The second system represents each real number as a
continued fraction; an infinite tower of sums and reciprocals. Both
systems benefit from a functional programming style and the resulting
code is very simple to understand.

Gowland, Paul, and David Lester. "A survey of exact arithmetic implementations." Computability and Complexity in Analysis. Springer Berlin Heidelberg, 2001. 30-47.

Lester, David R. "The world ºs shortest correct exact real arithmetic program?." Information and Computation 216 (2012): 39-46.

Gosper, Ralph W. "Continued fraction arithmetic." HAKMEM Item 101B, MIT Artificial Intelligence Memo 239 (1972).

Vuillemin, Jean E. "Exact real computer arithmetic with continued fractions." Computers, IEEE Transactions on 39.8 (1990): 1087-1105.

exact real arithmetic
mathematics
continued fractions
haskell
lazy evaluation
